#!/usr/bin/env node

'use strict';

var program = require('commander');
var Map = require('../lib/Map');

var map;
var coordinate;
var coordinates;
var projectedPoint;
var projectedPoints;
var coordinateZooms;
var pixel;
var pixelZooms;
var tileIndexX, tileIndexY;
var coordinateZoomTranslate;

program
  .version('0.0.9')
  .option('-e, --extent', 'Web Mercator Extent')
  .option('-m, --c2m [c2m]', 'Coordinate to Meter: -m latitude,longitude')
  .option('-n, --m2c [m2c]', 'Meter to Coordinate: -n meterX,meterY')
  .option('-p, --c2p [c2p]', 'Coordinate to Pixel: -p latitude,longitude,zoom')
  .option('-c, --p2c [p2c]', 'Pixel to Coordinate: -c pixelX,pixelY,zoom')
  .option('-i, --tileindex [tileindex]', 'Calculate the TileIndex: -i latitude,longitude[,zoom]')
  .option('-t, --translate [translate]', 'Translate: -t latitude,longitude,zoom,translateX,translateY')
  .parse(process.argv);

if (program.extent) {
  console.log(new Map.Rect(-20037508.34, -20037508.34, 40075016.68, 40075016.68));

} else if (program.c2m && typeof program.c2m !== 'boolean') {
  coordinates = program.c2m.split(/,/);
  if (coordinates.length < 2) return;

  map = new Map();
  projectedPoint = map.coordinateToProjectedPoint(new Map.Coordinate(coordinates[0], coordinates[1]));
  console.log(projectedPoint);

} else if (program.m2c && typeof program.m2c !== 'boolean') {
  projectedPoints = program.m2c.split(/,/);
  if (projectedPoints.length < 2) return;

  map = new Map();
  coordinate = map.projectedPointToCoordinate(new Map.ProjectedPoint(projectedPoints[0], projectedPoints[1]));
  console.log(coordinate);

} else if (program.c2p && typeof program.c2p !== 'boolean') {
  coordinateZooms = program.c2p.split(/,/);
  if (coordinateZooms.length < 3) return;

  map = new Map();
  map.zoom = coordinateZooms[2];
  pixel = map.coordinateToPixel(new Map.Coordinate(coordinateZooms[0], coordinateZooms[1]));
  console.log(pixel);

} else if (program.p2c && typeof program.p2c !== 'boolean') {
  pixelZooms = program.p2c.split(/,/);
  if (pixelZooms.length < 3) return;

  map = new Map();
  map.zoom = pixelZooms[2];
  coordinate = map.pixelToCoordinate(new Map.Point(pixelZooms[0], pixelZooms[1]));
  console.log(coordinate);

} else if (program.tileindex && typeof program.tileindex !== 'boolean') {
  coordinateZooms = program.tileindex.split(/,/);
  if (coordinateZooms.length === 2) {
    map = new Map();
    for (var i = 0; i < 23; i++) {
      map.zoom = i;

      pixel = map.coordinateToPixel(new Map.Coordinate(coordinateZooms[0], coordinateZooms[1]));

      tileIndexX = parseInt(pixel.x / 256, 10);
      tileIndexY = parseInt(pixel.y / 256, 10);
      console.log('%d/%d/%d', i, tileIndexX, tileIndexY);
    }

  } else if (coordinateZooms.length === 3) {

    map = new Map();
    map.zoom = coordinateZooms[2];

    pixel = map.coordinateToPixel(new Map.Coordinate(coordinateZooms[0], coordinateZooms[1]));

    tileIndexX = parseInt(pixel.x / 256, 10);
    tileIndexY = parseInt(pixel.y / 256, 10);
    console.log('%d/%d/%d', coordinateZooms[2], tileIndexX, tileIndexY);

  }
} else if(program.translate && typeof program.translate !== 'boolean') {
  coordinateZoomTranslate = program.translate.split(/,/);
  if (coordinateZoomTranslate.length < 5) return;

  map = new Map();
  map.zoom = coordinateZoomTranslate[2];
  pixel = map.coordinateToPixel(new Map.Coordinate(coordinateZoomTranslate[0], coordinateZoomTranslate[1]));
  pixel.x += parseFloat(coordinateZoomTranslate[3]);
  pixel.y += parseFloat(coordinateZoomTranslate[4]);
  coordinate = map.pixelToCoordinate(pixel);
  console.log(coordinate);
}
